package com.datastructure.Greedy;
import java.util.Comparator;
import java.util.PriorityQueue;

class HuffmanNode {

	int data;
	char c;

	HuffmanNode left;
	HuffmanNode right;
}

class MyComparators implements Comparator<HuffmanNode> {
	public int compare(HuffmanNode x, HuffmanNode y)
	{

		return x.data - y.data;
	}
}

public class HuffManCoding {

    public static void printCode(HuffmanNode root, String s)
    {
 
        // base case; if the left and right are null
        // then its a leaf node and we print
        // the code s generated by traversing the tree.
        if (root.left== null && root.right == null && Character.isLetter(root.c)) {
 
            // c is the character in the node
            System.out.println(root.c + " : " + s);
 
            return;
        }
 
        // if we go to left then add "0" to the code.
        // if we go to the right add"1" to the code.
        
        printCode(root.left, s + "0");
        printCode(root.right, s + "1");
    }
	
	public static void main(String[] args)
	{

		int n = 6;
		char[] charArray = { 'a', 'b', 'c', 'd', 'e', 'f' };
		int[] charfreq = { 5, 9, 12, 13, 16, 45 };

		PriorityQueue<HuffmanNode> pQueue = new PriorityQueue<HuffmanNode>( n , new MyComparators());

		for (int i = 0; i < n; i++) {

			HuffmanNode hn = new HuffmanNode();

			hn.c = charArray[i];
			hn.data = charfreq[i];

			hn.left = null;
			hn.right = null;

			pQueue.add(hn);
		}

		HuffmanNode root = null;
		while (pQueue.size() > 1) {

			HuffmanNode x = pQueue.peek();
			pQueue.poll();
			HuffmanNode y = pQueue.peek();
			pQueue.poll();

			HuffmanNode f = new HuffmanNode();
			f.data = x.data + y.data;
			f.c = '-';

			// first extracted node as left child.
			f.left = x;
			// second extracted node as the right child.
			f.right = y;
			root = f;
			pQueue.add(f);

		}
		printCode(root, "");
	}
}